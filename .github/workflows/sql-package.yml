name: SQL-PACKAGE

on:
  push:
    branches:
      - main
      - develop
      - satish/sqlworkflowsetup

jobs:
  copy-changed-files:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Copy Changed Files from SQL migrations
        id: copy-files
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_ID: ${{ github.sha }}
        run: |
          $sourceDir = "${{ github.workspace }}"
          $destDir = "${{ github.workspace }}/changed-files"
          $targetSubDirectory = "sql/migrations" # Focus only on this directory
          
          # Create artifacts directory
          New-Item -Path $destDir -ItemType Directory -Force
          
          # Get the commit SHA
          $commitSha = "$env:COMMIT_ID"
          Write-Host "Analyzing commit: $commitSha"
          
          # Use GitHub API to get commit details
          $headers = @{
              Authorization = "Bearer $env:GITHUB_TOKEN"
              Accept = "application/vnd.github.v3+json"
          }
          
          $apiUrl = "https://api.github.com/repos/${{ github.repository }}/commits/$commitSha"
          Write-Host "Fetching commit details from: $apiUrl"
          
          try {
              $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Get
              $allChangedFiles = $response.files | ForEach-Object { $_.filename }
              
              if ($null -eq $allChangedFiles) {
                  Write-Host "No changed files found in the API response" -ForegroundColor Yellow
                  $allChangedFiles = @()
              }
              
              # Filter files to only include those in the target directory
              $changedFiles = $allChangedFiles | Where-Object { $_ -like "$targetSubDirectory/*" }
              
              if ($changedFiles.Count -eq 0) {
                  Write-Host "==============================================" -ForegroundColor Yellow
                  Write-Host "NO CHANGES IN migrations FOLDER" -ForegroundColor Yellow
                  Write-Host "==============================================" -ForegroundColor Yellow
                  # Set output variable to indicate no changes
                  Write-Output "changes_found=false" >> $env:GITHUB_OUTPUT
              } else {
                  # Set output variable to indicate changes were found
                  Write-Output "changes_found=true" >> $env:GITHUB_OUTPUT
              }
          }
          catch {
              Write-Host "Error fetching commit details from GitHub API: $_" -ForegroundColor Red
              Write-Host "Response: $($_.ErrorDetails.Message)" -ForegroundColor Red
              exit 1
          }
          
          # Echo list of all changed files vs filtered files
          Write-Host "======= ALL CHANGED FILES ======="
          foreach ($file in $allChangedFiles) {
              Write-Host $file
          }
          Write-Host "Total files changed in repo: $($allChangedFiles.Count)"
          Write-Host "=================================="
          
          Write-Host "======= FILTERED CHANGED FILES ($targetSubDirectory) ======="
          if ($changedFiles.Count -eq 0) {
              Write-Host "NO CHANGES IN MIGRATION FOLDER" -ForegroundColor Yellow
          } else {
              foreach ($file in $changedFiles) {
                  Write-Host $file
              }
          }
          # Fix for the colon issue in string interpolation
          Write-Host "Total files changed in $targetSubDirectory - $($changedFiles.Count)"
          Write-Host "=================================="
          
          $fileCount = 0
          $copiedFiles = @()
          
          foreach ($file in $changedFiles) {
              $fileCount++
              Write-Host ".....Processing Changed File: $file"
              
              # Convert forward slashes to backslashes for Windows paths
              $filePath = $file.Replace("/", "\")
              $path = Split-Path -Path $filePath
              
              # Create directory structure
              if ($path) {
                  $targetDir = "$destDir\$path"
                  Write-Host "Creating directory: $targetDir"
                  if (!(Test-Path -Path $targetDir)) {
                      New-Item -Path $targetDir -ItemType Directory -Force
                  }
              } else {
                  $targetDir = $destDir
              }
              
              # Copy the file
              $sourceFile = "$sourceDir\$file"
              $destinationFile = "$targetDir\$(Split-Path -Path $file -Leaf)"
              
              if (Test-Path -Path $sourceFile -PathType Leaf) {
                  Write-Host "Copying File: $sourceFile to $destinationFile"
                  try {
                      Copy-Item -Path $sourceFile -Destination $destinationFile -Force
                      if (Test-Path -Path $destinationFile -PathType Leaf) {
                          Write-Host "Successfully copied to $destinationFile" -ForegroundColor Green
                          $copiedFiles += $destinationFile
                      } else {
                          Write-Host "Failed to copy to $destinationFile - file doesn't exist after copy" -ForegroundColor Red
                      }
                  } catch {
                      Write-Host "Error copying file: $_" -ForegroundColor Red
                  }
              } else {
                  Write-Host "Source file not found: $sourceFile" -ForegroundColor Yellow
              }
          }
          
          # List all files in the destination directory
          Write-Host "======= FILES IN DESTINATION DIRECTORY ======="
          if (Test-Path -Path $destDir) {
              $allDestFiles = Get-ChildItem -Path $destDir -Recurse -File | Select-Object -ExpandProperty FullName
              if ($allDestFiles.Count -gt 0) {
                  foreach ($file in $allDestFiles) {
                      Write-Host $file
                  }
                  Write-Host "Total files found in destination: $($allDestFiles.Count)"
              } else {
                  Write-Host "NO FILES COPIED - NO CHANGES IN migrations FOLDER" -ForegroundColor Yellow
              }
          } else {
              Write-Host "Destination directory does not exist" -ForegroundColor Red
          }
          Write-Host "=============================================="
          
          # Create a summary file
          $summaryFile = "$destDir\change-summary.md"
          "# Changes in SQL migrations Directory - Commit $commitSha" | Out-File -FilePath $summaryFile
          "" | Out-File -FilePath $summaryFile -Append
          
          if ($fileCount -eq 0) {
              "## NO CHANGES IN migrations FOLDER" | Out-File -FilePath $summaryFile -Append
          } else {
              "## Total files changed in SQL migrations: $fileCount" | Out-File -FilePath $summaryFile -Append
              "" | Out-File -FilePath $summaryFile -Append
              "## Changed Files:" | Out-File -FilePath $summaryFile -Append
              foreach ($file in $changedFiles) {
                  "- $file" | Out-File -FilePath $summaryFile -Append
              }
              
              "" | Out-File -FilePath $summaryFile -Append
              "## Copied Files:" | Out-File -FilePath $summaryFile -Append
              foreach ($file in $copiedFiles) {
                  "- $file" | Out-File -FilePath $summaryFile -Append
              }
          }
          
          if ($fileCount -eq 0) {
              Write-Host "NO CHANGES IN migrations FOLDER" -ForegroundColor Yellow
          } else {
              Write-Host "Total files copied: $($copiedFiles.Count)" -ForegroundColor Green
          }
      
      - name: Upload Changed Files Artifact
        if: steps.copy-files.outputs.changes_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: sql-migrations-changes-${{ github.sha }}
          path: ${{ github.workspace }}/changed-files/
          if-no-files-found: warn
          retention-days: 30

      - name: Add Job Summary
        shell: pwsh
        run: |
          $summaryFile = "${{ github.workspace }}/changed-files/change-summary.md"
          
          if (Test-Path -Path $summaryFile -PathType Leaf) {
              $content = Get-Content -Path $summaryFile -Raw
              
              # Output to job summary
              $content | Out-File -FilePath $env:GITHUB_STEP_SUMMARY
          } else {
              Write-Output "## NO CHANGES IN migrations FOLDER" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY
          }

  # Add a new job for database deployment
  deploy-to-database:
    needs: copy-changed-files
    # Only run this job if there were changes found in the migrations folder
    if: needs.copy-changed-files.outputs.changes_found == 'true'
    runs-on: windows-latest
    
    # Define environment based on branch
    environment:
      ${{ github.ref == 'refs/heads/main' && 'production' || 
          github.ref == 'refs/heads/develop' && 'development' || 
          'test' }}
    
    steps:
      - name: Download SQL Migration Artifacts
        uses: actions/download-artifact@v4
        with:
          name: sql-migrations-changes-${{ github.sha }}
          path: ${{ github.workspace }}/sql-migrations
      
      - name: Set up SQL Server Tools
        shell: pwsh
        run: |
          # Check if SQL Server tools are installed
          $sqlCmdPath = "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\SQLCMD.EXE"
          
          if (-not (Test-Path $sqlCmdPath)) {
            Write-Host "SQL Server tools not found. Installing..."
            
            # Download and install SQL Server tools (ODBC Driver)
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2168524" -OutFile "C:\sqlncli.msi"
            Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "C:\sqlncli.msi", "/qn", "IACCEPTSQLNCLILICENSETERMS=YES" -Wait
            
            # Verify installation
            if (-not (Test-Path $sqlCmdPath)) {
              Write-Host "Failed to install SQL Server tools" -ForegroundColor Red
              exit 1
            }
          }
      
      - name: Determine Database Connection Based on Environment
        id: db-config
        shell: pwsh
        run: |
          # Set different connection details based on the current environment
          if ('${{ github.ref }}' -eq 'refs/heads/main') {
            Write-Output "db_server=${{ secrets.PROD_DB_SERVER }}" >> $env:GITHUB_OUTPUT
            Write-Output "db_name=${{ secrets.PROD_DB_NAME }}" >> $env:GITHUB_OUTPUT
            Write-Output "env_name=Production" >> $env:GITHUB_OUTPUT
          } elseif ('${{ github.ref }}' -eq 'refs/heads/develop') {
            Write-Output "db_server=${{ secrets.DEV_DB_SERVER }}" >> $env:GITHUB_OUTPUT
            Write-Output "db_name=${{ secrets.DEV_DB_NAME }}" >> $env:GITHUB_OUTPUT
            Write-Output "env_name=Development" >> $env:GITHUB_OUTPUT
          } else {
            Write-Output "db_server=${{ secrets.TEST_DB_SERVER }}" >> $env:GITHUB_OUTPUT
            Write-Output "db_name=${{ secrets.TEST_DB_NAME }}" >> $env:GITHUB_OUTPUT
            Write-Output "env_name=Test" >> $env:GITHUB_OUTPUT
          }
      
      - name: Execute SQL Migration Scripts
        shell: pwsh
        env:
          DB_SERVER: ${{ steps.db-config.outputs.db_server }}
          DB_NAME: ${{ steps.db-config.outputs.db_name }}
          DB_USER: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          ENV_NAME: ${{ steps.db-config.outputs.env_name }}
        run: |
          Write-Host "Starting SQL migration deployment to $env:ENV_NAME environment..."
          Write-Host "Database Server: $env:DB_SERVER"
          Write-Host "Database Name: $env:DB_NAME"
          
          # Get all SQL files from the migrations directory
          $sqlFiles = Get-ChildItem -Path "${{ github.workspace }}/sql-migrations/sql/migrations" -Filter "*.sql" -Recurse | Sort-Object Name
          
          if ($sqlFiles.Count -eq 0) {
            Write-Host "No SQL files found in the migrations directory" -ForegroundColor Yellow
            exit 0
          }
          
          Write-Host "Found $($sqlFiles.Count) SQL files to execute:"
          foreach ($file in $sqlFiles) {
            Write-Host " - $($file.Name)"
          }
          
          # Create a log directory
          $logDir = "${{ github.workspace }}/logs"
          New-Item -Path $logDir -ItemType Directory -Force | Out-Null
          
          $successCount = 0
          $errorCount = 0
          $errorFiles = @()
          
          foreach ($file in $sqlFiles) {
            $logFile = Join-Path -Path $logDir -ChildPath "$($file.BaseName)_log.txt"
            Write-Host "Executing $($file.FullName)..."
            try {
              # Execute SQL file using SQLCMD
              $output = sqlcmd -S "$env:DB_SERVER" -d "$env:DB_NAME" -U "$env:DB_USER" -P "$env:DB_PASSWORD" -i "$($file.FullName)" -o "$logFile" -b
              
              if ($LASTEXITCODE -eq 0) {
                Write-Host "Successfully executed $($file.Name)" -ForegroundColor Green
                $successCount++
              } else {
                Write-Host "Error executing $($file.Name) - Check log file: $logFile" -ForegroundColor Red
                $errorCount++
                $errorFiles += $file.Name
              }
            } catch {
              Write-Host "Exception while executing $($file.Name): $_" -ForegroundColor Red
              $errorCount++
              $errorFiles += $file.Name
            }
          }
          
          # Create deployment summary
          $summaryFile = "${{ github.workspace }}/deployment-summary.md"
          "# SQL Migration Deployment Summary" | Out-File -FilePath $summaryFile
          "" | Out-File -FilePath $summaryFile -Append
          "## Environment: $env:ENV_NAME" | Out-File -FilePath $summaryFile -Append
          "- Database Server: $env:DB_SERVER" | Out-File -FilePath $summaryFile -Append
          "- Database Name: $env:DB_NAME" | Out-File -FilePath $summaryFile -Append
          "" | Out-File -FilePath $summaryFile -Append
          "## Execution Results" | Out-File -FilePath $summaryFile -Append
          "- Total Scripts: $($sqlFiles.Count)" | Out-File -FilePath $summaryFile -Append
          "- Successfully Executed: $successCount" | Out-File -FilePath $summaryFile -Append
          "- Failed: $errorCount" | Out-File -FilePath $summaryFile -Append
          
          if ($errorCount -gt 0) {
            "" | Out-File -FilePath $summaryFile -Append
            "## Failed Scripts" | Out-File -FilePath $summaryFile -Append
            foreach ($errorFile in $errorFiles) {
              "- $errorFile" | Out-File -FilePath $summaryFile -Append
            }
            
            Write-Host "Deployment completed with errors. $errorCount out of $($sqlFiles.Count) scripts failed." -ForegroundColor Red
            exit 1
          } else {
            Write-Host "Deployment completed successfully. All $($sqlFiles.Count) scripts executed." -ForegroundColor Green
          }
      
      - name: Upload Deployment Logs
        uses: actions/upload-artifact@v4
        with:
          name: sql-deployment-logs-${{ github.sha }}
          path: ${{ github.workspace }}/logs/
          retention-days: 14
      
      - name: Add Deployment Summary to Job Output
        shell: pwsh
        run: |
          $summaryFile = "${{ github.workspace }}/deployment-summary.md"
          
          if (Test-Path -Path $summaryFile -PathType Leaf) {
              $content = Get-Content -Path $summaryFile -Raw
              
              # Output to job summary
              $content | Out-File -FilePath $env:GITHUB_STEP_SUMMARY
          } else {
              Write-Output "## No Deployment Summary Available" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY
          }
